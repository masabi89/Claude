// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Control Plane Database Models

model Tenant {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  plan      String   @default("TRIAL") // TRIAL, BASIC, PRO, ENTERPRISE
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  orgUsers      OrgUser[]
  subscriptions Subscription[]
  auditLogs     AuditLog[]

  @@map("tenants")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String?
  avatar    String?
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  orgUsers  OrgUser[]
  auditLogs AuditLog[]

  @@map("users")
}

model OrgUser {
  tenantId String @map("tenant_id")
  userId   String @map("user_id")
  role     String // ORG_ADMIN, ORG_MEMBER, PROJECT_MANAGER, DEVELOPER, VIEWER
  joinedAt DateTime @default(now()) @map("joined_at")

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([tenantId, userId])
  @@map("org_users")
}

model Subscription {
  id                String   @id @default(uuid())
  tenantId          String   @map("tenant_id")
  plan              String   // TRIAL, BASIC, PRO, ENTERPRISE
  status            String   @default("TRIAL") // TRIAL, ACTIVE, PAST_DUE, CANCELED, UNPAID
  currentPeriodEnd  DateTime? @map("current_period_end")
  cancelAtPeriodEnd Boolean  @default(false) @map("cancel_at_period_end")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  tenantId  String?  @map("tenant_id")
  actorId   String?  @map("actor_id")
  action    String
  entity    String
  entityId  String?  @map("entity_id")
  meta      String?  // JSON as string for SQLite
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  tenant Tenant? @relation(fields: [tenantId], references: [id])
  actor  User?   @relation(fields: [actorId], references: [id])

  @@map("audit_log")
}

// Tenant Database Models (These will be created in separate tenant databases)

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  status      String   @default("ACTIVE") // ACTIVE, ON_HOLD, COMPLETED, ARCHIVED
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  startDate   DateTime? @map("start_date")
  endDate     DateTime? @map("end_date")
  ownerId     String   @map("owner_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  tasks        Task[]
  projectUsers ProjectUser[]
  comments     Comment[]
  files        File[]
  customFields CustomFieldValue[]

  @@map("projects")
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      String   @default("TODO") // TODO, IN_PROGRESS, IN_REVIEW, DONE, BLOCKED
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  dueDate     DateTime? @map("due_date")
  assigneeId  String?  @map("assignee_id")
  projectId   String   @map("project_id")
  parentId    String?  @map("parent_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  project      Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parent       Task?                @relation("TaskSubtasks", fields: [parentId], references: [id])
  subtasks     Task[]               @relation("TaskSubtasks")
  comments     Comment[]
  files        File[]
  customFields CustomFieldValue[]
  timeEntries  TimeEntry[]

  @@map("tasks")
}

model ProjectUser {
  projectId String   @map("project_id")
  userId    String   @map("user_id")
  role      String
  joinedAt  DateTime @default(now()) @map("joined_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([projectId, userId])
  @@map("project_users")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  authorId  String   @map("author_id")
  projectId String?  @map("project_id")
  taskId    String?  @map("task_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task    Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model File {
  id         String   @id @default(uuid())
  name       String
  path       String
  size       Int
  mimeType   String   @map("mime_type")
  uploaderId String   @map("uploader_id")
  projectId  String?  @map("project_id")
  taskId     String?  @map("task_id")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task    Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("files")
}

model CustomField {
  id        String   @id @default(uuid())
  name      String
  type      String   // TEXT, NUMBER, DATE, BOOLEAN, SELECT, MULTI_SELECT
  required  Boolean  @default(false)
  options   String?  // JSON as string for SQLite
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  values CustomFieldValue[]

  @@map("custom_fields")
}

model CustomFieldValue {
  id            String  @id @default(uuid())
  customFieldId String  @map("custom_field_id")
  projectId     String? @map("project_id")
  taskId        String? @map("task_id")
  value         String  // JSON as string for SQLite

  // Relations
  customField CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  project     Project?    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task        Task?       @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("custom_field_values")
}

model TimeEntry {
  id          String   @id @default(uuid())
  description String?
  hours       Float
  date        DateTime
  userId      String   @map("user_id")
  taskId      String   @map("task_id")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

