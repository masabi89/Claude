# .env.example

# ===================

# Environment Variables Template

# Copy this file to .env and fill in your actual values

# ===================

# Application

NODE_ENV=development
PORT=3001
API_PREFIX=api/v1

# Database Configuration

DB_HOST=localhost
DB_PORT=5432
DB_USERNAME=postgres
DB_PASSWORD=postgres
DB_DATABASE=promanage
DB_SYNCHRONIZE=true
DB_LOGGING=true

# Redis Configuration

REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0

# JWT Configuration

JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
JWT_EXPIRES_IN=7d
JWT_REFRESH_SECRET=your-super-secret-refresh-key-change-this-in-production
JWT_REFRESH_EXPIRES_IN=30d

# AWS S3 Configuration

AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=your_aws_access_key_id
AWS_SECRET_ACCESS_KEY=your_aws_secret_access_key
AWS_S3_BUCKET=promanage-files-dev

# File Upload Configuration

FILE_MAX_SIZE=104857600
FILE_ALLOWED_TYPES=image/*,application/pdf,text/*,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document

# Rate Limiting

THROTTLE_TTL=60
THROTTLE_LIMIT=100

# Security

CORS_ORIGIN=http://localhost:3000
BCRYPT_ROUNDS=12

# Monitoring & Logging

LOG_LEVEL=debug
ENABLE_SWAGGER=true

# Email Configuration (for future notifications)

SMTP_HOST=
SMTP_PORT=587
SMTP_USER=
SMTP_PASSWORD=
SMTP_FROM=noreply@promanage.com

# ============================================

# .gitignore

# ============================================

# Dependencies

node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Runtime data

pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul

coverage/
*.lcov

# nyc test coverage

.nyc_output

# Dependency directories

node_modules/
jspm_packages/

# TypeScript cache

*.tsbuildinfo

# Optional npm cache directory

.npm

# Optional eslint cache

.eslintcache

# Optional REPL history

.node_repl_history

# Output of ‘npm pack’

*.tgz

# Yarn Integrity file

.yarn-integrity

# Environment variables

.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs

logs
*.log

# Runtime data

pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover

lib-cov

# Coverage directory used by tools like istanbul

coverage
*.lcov

# nyc test coverage

.nyc_output

# Grunt intermediate storage

.grunt

# Bower dependency directory

bower_components

# node-waf configuration

.lock-wscript

# Compiled binary addons

build/Release

# Dependency directories

node_modules/
jspm_packages/

# TypeScript v1 declaration files

typings/

# TypeScript cache

*.tsbuildinfo

# Optional npm cache directory

.npm

# Optional eslint cache

.eslintcache

# Microbundle cache

.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history

.node_repl_history

# Output of ‘npm pack’

*.tgz

# Yarn Integrity file

.yarn-integrity

# dotenv environment variables file

.env
.env.test

# parcel-bundler cache

.cache
.parcel-cache

# Next.js build output

.next

# Nuxt.js build / generate output

.nuxt
dist

# Gatsby files

.cache/
public

# Storybook build outputs

.out
.storybook-out

# Temporary folders

tmp/
temp/

# Editor directories and files

.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files

.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Build outputs

dist/
build/

# Database

*.sqlite
*.db

# ============================================

# tsconfig.json

# ============================================

{
“compilerOptions”: {
“module”: “commonjs”,
“declaration”: true,
“removeComments”: true,
“emitDecoratorMetadata”: true,
“experimentalDecorators”: true,
“allowSyntheticDefaultImports”: true,
“target”: “ES2021”,
“sourceMap”: true,
“outDir”: “./dist”,
“baseUrl”: “./”,
“incremental”: true,
“skipLibCheck”: true,
“strictNullChecks”: false,
“noImplicitAny”: false,
“strictBindCallApply”: false,
“forceConsistentCasingInFileNames”: false,
“noFallthroughCasesInSwitch”: false,
“paths”: {
“@/*”: [“src/*”]
}
},
“include”: [“src/**/*”],
“exclude”: [“node_modules”, “dist”, “test”]
}

# ============================================

# nest-cli.json

# ============================================

{
“$schema”: “https://json.schemastore.org/nest-cli”,
“collection”: “@nestjs/schematics”,
“sourceRoot”: “src”,
“compilerOptions”: {
“deleteOutDir”: true
}
}

# ============================================

# docker-compose.yml (for development)

# ============================================

version: ‘3.8’

services:
postgres:
image: postgres:15
container_name: promanage-postgres
environment:
POSTGRES_DB: promanage
POSTGRES_USER: postgres
POSTGRES_PASSWORD: postgres
ports:
- “5432:5432”
volumes:
- postgres_data:/var/lib/postgresql/data
networks:
- promanage-network

redis:
image: redis:7-alpine
container_name: promanage-redis
ports:
- “6379:6379”
volumes:
- redis_data:/data
networks:
- promanage-network

minio:
image: minio/minio:latest
container_name: promanage-minio
command: server /data –console-address “:9001”
environment:
MINIO_ROOT_USER: minioadmin
MINIO_ROOT_PASSWORD: minioadmin
ports:
- “9000:9000”
- “9001:9001”
volumes:
- minio_data:/data
networks:
- promanage-network

volumes:
postgres_data:
redis_data:
minio_data:

networks:
promanage-network:
driver: bridge